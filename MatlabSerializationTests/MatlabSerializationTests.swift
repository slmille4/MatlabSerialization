//
//  MatlabSerializationTests.swift
//  MatlabSerializationTests
//
//  Created by Steve on 7/7/18.
//  Copyright Â© 2018 Steve. All rights reserved.
//

import XCTest
import CoreML
import CoreAudio
import AVFoundation
@testable import MatlabSerialization

public struct Basic {
    let a:String
    let b:Double
}

extension Array: MatlabEncodableArray where Element == Basic {
    public var keys: [String] {
        return ["a","b"]
    }
    
    public var columns:[[Any]] {
        let aArr = self.map{$0.a}
        let bArr = self.map{$0.b}
        return [aArr,bArr]
    }
}

class MatlabSerializationTests: XCTestCase {
    var byteIndex = 0
    var m = Data()
    
    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
        byteIndex = 0
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    
    func test64BitInts() {
        let arr: [Any] = [Int64(1),UInt64(2)]
        m = try!MatlabSerialization.data(withMatlabObject: arr)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 9)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 10)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
    }
    
    func testArrStructs() {
        let basicArr: [Basic] = [Basic(a: "A", b: 1),Basic(a: "B", b: 2),Basic(a: "C", b: 3)]
        
        m = try!MatlabSerialization.data(withMatlabObject: basicArr)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 128)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 97)
        assertByte(with: 98)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 66)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 67)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 8)
        assertByte(with: 64)
    }
    
    func testHeteroArray() {
        let arr:[Any] = ["A",[2.0],["C":3.0]]
        m = try!MatlabSerialization.data(withMatlabObject: arr)
        let bytes = [UInt8](m)
        print(bytes)

        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 67)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 8)
        assertByte(with: 64)
    }
    
    func testMLMultiArray() {
        guard let mlMultiArray = try? MLMultiArray(shape:[2,2], dataType:.double) else {
            fatalError("Unexpected runtime error. MLMultiArray")
        }
        
        let arr = [Double](arrayLiteral:1,2,3,4)
        for (index, element) in arr.enumerated() {
            mlMultiArray[index] = NSNumber(floatLiteral:element)
        }
        m = try!MatlabSerialization.data(withMatlabObject: mlMultiArray)
        
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 8)
        assertByte(with: 64)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 16)
        assertByte(with: 64)
    }
    
    func testString() {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
        m = try!MatlabSerialization.data(withMatlabObject: "test")
//        [0;4;0;0;0;116;101;115;116]
        assertByte(with: 0)
        assertByte(with: 4)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 116)
        assertByte(with: 101)
        assertByte(with: 115)
        assertByte(with: 116)
    }
    
    func testCell() {
        m = try!MatlabSerialization.data(withMatlabObject: ["AB"])
        let bytes = [UInt8](m)
        print(bytes)
        assertByte(with: 36)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 66)
        assertByte(with: 24)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 133)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
    }
    
    func testLogical() {
        let array = [true,false]
        m = try!MatlabSerialization.data(withMatlabObject: array)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 39)
        assertByte(with: 133)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
    }
    
    func testStructsArr() {
        let dict:[[String:[Double]]] = [["A":[1.0,2.0]],["B":[2.0,3.0]]]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 66)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 8)
        assertByte(with: 64)
    }
    
    func testStructArr() {
        let dict:[String:[Double]] = ["A":[1.0,2.0,3.0]]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 64)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 8)
        assertByte(with: 64)
    }
    
    func testHomogArr() {
        let dict:[[String:Any]] = [["A":1.0],["B":"C"]]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 66)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 67)
    }
    func testStructCharArr() {
        let dict:[String:[String]] = ["b":["a","b","c"]]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 98)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 3)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 97)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 98)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 99)
    }
    
    func testStructStruct() {
        let dict:[String:Any] = ["A":["B":1.0] as [String:Double]]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 65)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 33)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 66)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
    }
    
    func testStructString() {
        let dict:[String:String] = ["a":"test"]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        let bytes = [UInt8](m)
        print(bytes)
        
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 97)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 36)
        assertByte(with: 0)
        assertByte(with: 4)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 116)
        assertByte(with: 101)
        assertByte(with: 115)
        assertByte(with: 116)
        assertByte(with: 24)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 4)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 133)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
    }
    
    func testStructScalar() {
        let dict:[String:Double] = ["a":1]
        m = try!MatlabSerialization.data(withMatlabObject: dict)
        
        
        assertByte(with: 128)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 97)
        assertByte(with: 2)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 34)
        assertByte(with: 17)
        assertByte(with: 2)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 1)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 0)
        assertByte(with: 240)
        assertByte(with: 63)
    }
    
    func createBuffer(_ outBuffer:AVAudioPCMBuffer) {
        let outputBuffer = UnsafeMutableAudioBufferListPointer(outBuffer.mutableAudioBufferList)
        var counter:Float = 1
        outBuffer.frameLength = outBuffer.frameCapacity
        for buffer in outputBuffer {
            guard let data = buffer.mData?.assumingMemoryBound(to: Float32.self) else { continue }
            
            for i in 0..<outBuffer.frameCapacity {
                //        data[i] = counter
                data.advanced(by: Int(i)).pointee = counter
                counter += 1
            }
//            buffer.mDataByteSize = outBuffer.frameCapacity * MemoryLayout<Float32>.size
        }
    }
    
    func testExample() {
//        let format1 = AVAudioFormat(
//            commonFormat: .pcmFormatInt32,
//            sampleRate: 128,
//            interleaved: false,
//            channelLayout: AVAudioChannelLayout(layoutTag: kAudioChannelLayoutTag_Quadraphonic)!)
        
        let format2 = AVAudioFormat(
            commonFormat: .pcmFormatFloat32,
            sampleRate: 2200,
            interleaved: false,
            channelLayout: AVAudioChannelLayout(layoutTag: kAudioChannelLayoutTag_Quadraphonic)!)
        
        // Create format
//        var outputFormat: AudioStreamBasicDescription = AudioStreamBasicDescription()
//        outputFormat.mFormatID = kAudioFormatLinearPCM
////        outputFormat.mFormatFlags = kAudioFormatFlagsNativeFloatPacked | kLinearPCMFormatFlagIsNonInterleaved
//        outputFormat.mFormatFlags = kAudioFormatFlagIsFloat|kAudioFormatFlagIsNonInterleaved
//        outputFormat.mSampleRate = 128
//        outputFormat.mFramesPerPacket = 1
//        outputFormat.mChannelsPerFrame = 4
//        outputFormat.mBytesPerPacket = UInt32(MemoryLayout<Float32>.size) * outputFormat.mChannelsPerFrame
//        outputFormat.mBytesPerFrame = UInt32(MemoryLayout<Float32>.size) * outputFormat.mChannelsPerFrame
//        outputFormat.mBitsPerChannel = UInt32(8 * MemoryLayout<Float32>.size)
        
        // Create test Audio Buffer
        let bufferSize:UInt32 = 10
//        let outputLayoutSubstitute = AVAudioChannelLayout(layoutTag: kAudioChannelLayoutTag_Quadraphonic)
        
//        guard let format = AVAudioFormat(streamDescription:&outputFormat, channelLayout:outputLayoutSubstitute) else { print("format bad"); return XCTFail() }
        guard let outBuffer = AVAudioPCMBuffer(pcmFormat: format2, frameCapacity: bufferSize) else { print("outBuffer bad"); return XCTFail() }
        
        createBuffer(outBuffer)
        
        // Save matrix to .CAF file
        let fm = FileManager.default
        let doc = try! fm.url(for:.documentDirectory, in: .userDomainMask, appropriateFor: nil, create: true)
        let fileURL = doc.appendingPathComponent("myfile.caf", isDirectory:false)
        try? fm.removeItem(at: fileURL) // just in case
    
        do {
            let outFile = try AVAudioFile(forWriting: fileURL, settings: outBuffer.format.settings)
//            let outFile = try AVAudioFile(forWriting: fileURL, nil,
//                commonFormat: .pcmFormatFloat32,
//                sampleRate: 2200,
//                interleaved: false)
            try outFile.write(from:outBuffer)
        } catch {
            print(error)
            XCTFail()
        }
        
        // Read, Convert .CAF file to MLMultiArray
        guard let infile = try? AVAudioFile(forReading: fileURL),
            let inBuffer = AVAudioPCMBuffer(pcmFormat: infile.processingFormat, frameCapacity: UInt32(infile.length)) else { XCTFail(); return }
        

        let test = UnsafeBufferPointer<UnsafeMutablePointer<Float>>(start:inBuffer.floatChannelData, count:Int(inBuffer.format.channelCount))
        for buffer in test {
            let floats = UnsafeBufferPointer<Float>(start:buffer, count:Int(inBuffer.frameCapacity))
            for (index, value) in floats.enumerated() {
                print("value \(index): \(value)")
            }
        }
        //        let thing = UnsafeMutableAudioBufferListPointer(inBuffer.mutableAudioBufferList)
        //        let test = inBuffer.floatChannelData
        let mlm = convertAudioBufferList(inBuffer.mutableAudioBufferList, alignment: MemoryLayout<Float32>.alignment)
        
        
        //        let abl = inBuffer?.audioBufferList
        
        // Send MLMultiArray to Matlab
        
    }
    
    func assertByte(with: UInt8){
        XCTAssertEqual(m[byteIndex], with)
        byteIndex += 1
    }
}
